// Generated by CodiumAI
const jwt = require("jsonwebtoken");
const { authenticateToken } = require("./token");
const testtoken =
  "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJuYW1lIjoiU3R1ZGVudCIsImlhdCI6MTcwMzc1ODI5MywiZXhwIjoxNzAzNzU4ODkzfQ.V10HGJ6xMVtWIoAL0c_UAucSZgXhmZMh7F_xQ6BjSeM";
describe("authenticateToken", () => {
  // Returns 200 status code and expiry time if token is valid
  it("should return 200 status code and expiry time when token is valid", () => {
    const req = {
      body: {
        token: testtoken,
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    jwt.verify = jest.fn().mockReturnValue({ exp: 1234567890 });

    authenticateToken(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({ expiry: 1234567890 });
  });

  // Returns 401 status code if token is not provided
  it("should return 401 status code when token is not provided", () => {
    const req = {
      body: {},
    };
    const res = {
      sendStatus: jest.fn(),
    };

    authenticateToken(req, res);

    expect(res.sendStatus).toHaveBeenCalledWith(401);
  });

  // Returns 401 status code if token is invalid
  it("should return 401 status code when token is invalid", () => {
    const req = {
      body: {
        token: "invalidToken",
      },
    };
    const res = {
      sendStatus: jest.fn(),
    };

    jwt.verify = jest.fn().mockImplementation(() => {
      throw new Error("Invalid token");
    });

    authenticateToken(req, res);

    expect(res.sendStatus).toHaveBeenCalledWith(401);
  });

  // Returns 401 status code if an error occurs during token verification
  it("should return 401 status code when an error occurs during token verification", () => {
    const req = {
      body: {
        token: testtoken,
      },
    };
    const res = {
      sendStatus: jest.fn(),
    };

    jwt.verify = jest.fn().mockImplementation(() => {
      throw new Error("Verification error");
    });

    authenticateToken(req, res);

    expect(res.sendStatus).toHaveBeenCalledWith(401);
  });

  // Supports tokens signed with JWT_SECRET environment variable
  it("should support tokens signed with JWT_SECRET environment variable", () => {
    const req = {
      body: {
        token: testtoken,
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    process.env.JWT_SECRET = "secret";

    jwt.verify = jest.fn().mockReturnValue({ exp: 1234567890 });

    authenticateToken(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({ expiry: 1234567890 });
  });

  // Can handle tokens with different signing algorithms
  it("should handle tokens with different signing algorithms", () => {
    const req = {
      body: {
        token: testtoken,
      },
    };
    const res = {
      status: jest.fn().mockReturnThis(),
      json: jest.fn(),
    };

    jwt.verify = jest.fn().mockReturnValue({ exp: 1234567890 });

    authenticateToken(req, res);

    expect(res.status).toHaveBeenCalledWith(200);
    expect(res.json).toHaveBeenCalledWith({ expiry: 1234567890 });
  });
});
